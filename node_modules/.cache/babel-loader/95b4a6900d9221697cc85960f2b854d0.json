{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useWindowSize = () => {\n  _s();\n\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n\n    const cleanUp = () => {\n      console.log('Runs if a useEffect dep changes');\n      window.removeEventListener('resize', handleResize);\n    }; // this function will remove any memory leaks\n\n\n    return cleanUp;\n  }, []);\n  return windowSize;\n};\n\n_s(useWindowSize, \"c4qf3T3ntwaWr7rmXJcJwcTfMJk=\");\n\nexport default useWindowSize;","map":{"version":3,"sources":["G:/Projects/React/dave_grey_react/learn_react_router/src/hooks/usWindowSize.js"],"names":["useState","useEffect","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","cleanUp","console","log","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC;AAC3CK,IAAAA,KAAK,EAAEC,SADoC;AAE3CC,IAAAA,MAAM,EAAED;AAFmC,GAAD,CAA5C;AAKAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,YAAY,GAAG,MAAM;AACzBJ,MAAAA,aAAa,CAAC;AACZC,QAAAA,KAAK,EAAEI,MAAM,CAACC,UADF;AAEZH,QAAAA,MAAM,EAAEE,MAAM,CAACE;AAFH,OAAD,CAAb;AAID,KALD;;AAMAH,IAAAA,YAAY;AAEZC,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC;;AAEA,UAAMK,OAAO,GAAG,MAAK;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAN,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC;AACH,KAHD,CAXc,CAed;;;AAEA,WAAOK,OAAP;AAED,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,SAAOV,UAAP;AACD,CA5BD;;GAAMD,a;;AA+BN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useWindowSize = () => {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    };\r\n    handleResize();\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    const cleanUp = ()=> {\r\n        console.log('Runs if a useEffect dep changes');\r\n        window.removeEventListener('resize', handleResize)\r\n    }\r\n    // this function will remove any memory leaks\r\n\r\n    return cleanUp;\r\n\r\n  }, []);\r\n\r\n  return windowSize;\r\n};\r\n\r\n\r\nexport default useWindowSize;"]},"metadata":{},"sourceType":"module"}