{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useAxiosFetch = dataURL => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [fetchError, setFetchError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    let isMounted = true;\n    const source = axios.CancelToken.source();\n\n    const fetchData = async url => {\n      setIsLoading(true);\n\n      try {\n        const response = await axios.get(url, {\n          cancelToken: source.token\n        });\n\n        if (isMounted) {\n          setData(response.data);\n          setFetchError(null);\n        }\n      } catch (error) {\n        if (isMounted) {\n          setFetchError(error.message);\n          setData([]);\n        }\n      } finally {\n        isMounted && setTimeout(2000);\n      }\n    };\n\n    fetchData(dataURL);\n\n    const cleanUp = () => {\n      console.log('clean up function');\n      isMounted = false;\n      source.cancel();\n    };\n\n    return cleanUp;\n  }, [dataURL]);\n  return {\n    data,\n    fetchError,\n    isLoading\n  };\n};\n\n_s(useAxiosFetch, \"+XJtC1F4PrEeMvccO02DD8cTlfg=\");\n\nexport default useAxiosFetch;","map":{"version":3,"sources":["G:/Projects/React/dave_grey_react/learn_react_router/src/hooks/useAxiosFetch.js"],"names":["useState","useEffect","axios","useAxiosFetch","dataURL","data","setData","fetchError","setFetchError","isLoading","setIsLoading","isMounted","source","CancelToken","fetchData","url","response","get","cancelToken","token","error","message","setTimeout","cleanUp","console","log","cancel"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAAA;;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,SAAS,GAAG,IAAhB;AACA,UAAMC,MAAM,GAAGV,KAAK,CAACW,WAAN,CAAkBD,MAAlB,EAAf;;AAEA,UAAME,SAAS,GAAG,MAAOC,GAAP,IAAe;AAC/BL,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAI;AACF,cAAMM,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUF,GAAV,EAAe;AACpCG,UAAAA,WAAW,EAAEN,MAAM,CAACO;AADgB,SAAf,CAAvB;;AAGA,YAAIR,SAAJ,EAAe;AACbL,UAAAA,OAAO,CAACU,QAAQ,CAACX,IAAV,CAAP;AACAG,UAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,OARD,CAQE,OAAOY,KAAP,EAAc;AACd,YAAIT,SAAJ,EAAe;AACbH,UAAAA,aAAa,CAACY,KAAK,CAACC,OAAP,CAAb;AACAf,UAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,OAbD,SAaU;AACRK,QAAAA,SAAS,IAAIW,UAAU,CAAE,IAAF,CAAvB;AACD;AACF,KAlBD;;AAmBAR,IAAAA,SAAS,CAACV,OAAD,CAAT;;AAEA,UAAMmB,OAAO,GAAG,MAAM;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAd,MAAAA,SAAS,GAAG,KAAZ;AACAC,MAAAA,MAAM,CAACc,MAAP;AACH,KAJD;;AAKA,WAAOH,OAAP;AACD,GA/BQ,EA+BN,CAACnB,OAAD,CA/BM,CAAT;AAiCA,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,UAAP;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CAvCD;;GAAMN,a;;AAyCN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useAxiosFetch = (dataURL) => {\r\n  const [data, setData] = useState([]);\r\n  const [fetchError, setFetchError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const source = axios.CancelToken.source();\r\n\r\n    const fetchData = async (url) => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await axios.get(url, {\r\n          cancelToken: source.token,\r\n        });\r\n        if (isMounted) {\r\n          setData(response.data);\r\n          setFetchError(null);\r\n        }\r\n      } catch (error) {\r\n        if (isMounted) {\r\n          setFetchError(error.message);\r\n          setData([]);\r\n        }\r\n      } finally {\r\n        isMounted && setTimeout( 2000);\r\n      }\r\n    };\r\n    fetchData(dataURL);\r\n\r\n    const cleanUp = () => {\r\n        console.log('clean up function')\r\n        isMounted = false;\r\n        source.cancel();\r\n    }\r\n    return cleanUp;\r\n  }, [dataURL]);\r\n\r\n  return {data, fetchError, isLoading}\r\n};\r\n\r\nexport default useAxiosFetch;"]},"metadata":{},"sourceType":"module"}